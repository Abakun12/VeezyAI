from deepface import DeepFace
import numpy as np
import cv2
import logging
from flask import request, jsonify


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MODEL_NAME = "Facenet"
DETECTOR_NAME = "retinaface"

def enroll_face():
    """
    Enroll face image to database.
    """
    if request.method == 'POST':
        if 'file' not in request.files:
            logger.warning("Kh√¥ng c√≥ tr∆∞·ªùng 'file' trong request.files cho POST request.")
            return jsonify({"error": "Tr∆∞·ªùng 'file' kh√¥ng c√≥ trong request"}), 400

        file = request.files['file']
        if file.filename == '':
            logger.warning("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ upload.")
            return jsonify({"error": "Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn"}), 400

        try:
            images_stream= file.read()
            np_image = np.frombuffer(images_stream, np.uint8)
            img_cv2 = cv2.imdecode(np_image, cv2.IMREAD_COLOR)
            # images_stream = "img/avarta.png"
            # img_cv2 = cv2.imread(images_stream)

            if img_cv2 is None:
                logger.warning("Error reading image")
                return jsonify({"error": "Error reading image"}), 400

            logger.info(f"Image read successfully: {file.filename}")

            logger.info(f"Start extraction with specific model: {MODEL_NAME}, detector: {DETECTOR_NAME}")
            embedding_objects = DeepFace.represent(
                img_path=img_cv2,
                model_name=MODEL_NAME,
                detector_backend=DETECTOR_NAME,
                enforce_detection=True,
                anti_spoofing=True,
                align=True
            )

            if not embedding_objects or not isinstance(embedding_objects, list) or not embedding_objects[0]:
                logger.warning("Error extracting embedding")
                return jsonify({"error": "Error extracting embedding"}), 400

            first_face_obj = embedding_objects[0]
            embedding_vector = first_face_obj['embedding']
            facial_area = first_face_obj['facial_area']
            face_confidence = first_face_obj.get('face_confidence', None)

            logger.info(f"Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng th√†nh c√¥ng. Khu v·ª±c khu√¥n m·∫∑t: {facial_area}, ƒê·ªô tin c·∫≠y: {face_confidence}")

            response_data = {
                "message": "ƒêƒÉng k√Ω khu√¥n m·∫∑t th√†nh c√¥ng (Enrollment successful)",
                "embedding": embedding_vector,
                "facial_area_detected": facial_area,
                "model_details": {
                    "model_name": MODEL_NAME,
                    "detector_backend": DETECTOR_NAME
                }
            }
            if face_confidence is not None:
                response_data["face_confidence"] = face_confidence

            return jsonify(response_data), 200

        except ValueError as ve:
            error_message = str(ve).lower()  # Chuy·ªÉn th√¥ng b√°o l·ªói v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ d·ªÖ ki·ªÉm tra
            logger.error(f"L·ªói x·ª≠ l√Ω khu√¥n m·∫∑t (ValueError): {error_message}")

            # Ki·ªÉm tra xem th√¥ng b√°o l·ªói c√≥ ch·ª©a manh m·ªëi v·ªÅ gi·∫£ m·∫°o kh√¥ng
            if 'spoof' in error_message or 'real-time face liveness' in error_message:
                logger.warning("C·∫£nh b√°o gi·∫£ m·∫°o: Khu√¥n m·∫∑t c√≥ th·ªÉ kh√¥ng ph·∫£i ng∆∞·ªùi th·∫≠t.")
                return jsonify({"error": "Ph√°t hi·ªán h√†nh vi ƒë√°ng ng·ªù. Vui l√≤ng s·ª≠ d·ª•ng ·∫£nh ch·ª•p tr·ª±c ti·∫øp."}), 403
            else:
                # N·∫øu l√† l·ªói ValueError kh√°c (v√≠ d·ª•: kh√¥ng t√¨m th·∫•y khu√¥n m·∫∑t)
                return jsonify({"error": f"L·ªói ph√°t hi·ªán khu√¥n m·∫∑t: {str(ve)}"}), 400
        except Exception as e:
            logger.exception(f"L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}")
            return jsonify({"error": f"ƒê√£ x·∫£y ra l·ªói n·ªôi b·ªô: {str(e)}"}), 500
    else:
        # X·ª≠ l√Ω cho c√°c method kh√°c n·∫øu b·∫°n cho ph√©p (v√≠ d·ª•: tr·∫£ v·ªÅ l·ªói 405)
        return jsonify({"error": "Ph∆∞∆°ng th·ª©c kh√¥ng ƒë∆∞·ª£c ph√©p cho endpoint n√†y. Vui l√≤ng s·ª≠ d·ª•ng POST."}), 405

def preload_models():
    """H√†m ƒë·ªÉ t·∫£i tr∆∞·ªõc c√°c m√¥ h√¨nh AI."""
    try:
        logger.info(f"ƒêang t·∫£i m√¥ h√¨nh AI ({MODEL_NAME}) v√† detector ({DETECTOR_NAME})...")
        DeepFace.build_model(MODEL_NAME)
        dummy_img = np.zeros((100, 100, 3), dtype=np.uint8)
        # S·ª≠ d·ª•ng extract_faces thay v√¨ detectFace (ƒë√£ deprecated)
        # v√† ƒë·∫∑t enforce_detection=False khi ch·ªâ d√πng ƒë·ªÉ t·∫£i tr∆∞·ªõc model v·ªõi ·∫£nh gi·∫£.
        DeepFace.extract_faces(
            img_path=dummy_img,
            detector_backend=DETECTOR_NAME,
            enforce_detection=False,
            anti_spoofing=True
        )
        logger.info(f"C√°c m√¥ h√¨nh AI ({MODEL_NAME}, {DETECTOR_NAME}) ƒë√£ s·∫µn s√†ng.")
    except Exception as e:
        logger.exception(f"L·ªói khi t·∫£i m√¥ h√¨nh: {e}")

def extract_embedding_from_image(img_cv2):
    """
    Tr√≠ch xu·∫•t vector ƒë·∫∑c tr∆∞ng khu√¥n m·∫∑t t·ª´ ·∫£nh ƒë√£ load (OpenCV format).
    """
    if img_cv2 is None:
        logger.error("·∫¢nh ƒë·∫ßu v√†o cho extract_embedding_from_image l√† None.")
        raise ValueError("·∫¢nh ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá (None).")

    logger.info(f"üîç Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng v·ªõi model: {MODEL_NAME}, detector: {DETECTOR_NAME}")
    try:
        embedding_objects = DeepFace.represent(
            img_path=img_cv2,
            model_name=MODEL_NAME,
            detector_backend=DETECTOR_NAME,
            enforce_detection=True, # B·∫Øt bu·ªôc t√¨m th·∫•y khu√¥n m·∫∑t trong ·∫£nh th·∫≠t
            align=True
        )

        if not embedding_objects or not isinstance(embedding_objects, list) or not embedding_objects[0]:
            # L·ªói n√†y c√≥ th·ªÉ kh√¥ng bao gi·ªù x·∫£y ra n·∫øu enforce_detection=True v√¨ n√≥ s·∫Ω raise ValueError tr∆∞·ªõc
            logger.error("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c ƒë·ªëi t∆∞·ª£ng embedding h·ª£p l·ªá.")
            raise ValueError("Kh√¥ng tr√≠ch xu·∫•t ƒë∆∞·ª£c ƒë·∫∑c tr∆∞ng khu√¥n m·∫∑t t·ª´ ·∫£nh.")

        first_face_obj = embedding_objects[0]
        embedding_vector = first_face_obj['embedding']
        facial_area = first_face_obj['facial_area']
        face_confidence = first_face_obj.get('face_confidence', None)

        return embedding_vector, facial_area, face_confidence
    except ValueError as ve: # B·∫Øt l·ªói c·ª• th·ªÉ t·ª´ DeepFace.represent khi kh√¥ng t√¨m th·∫•y m·∫∑t
        logger.error(f"L·ªói t·ª´ DeepFace.represent: {ve}")
        raise ValueError(f"Kh√¥ng th·ªÉ ph√°t hi·ªán ho·∫∑c x·ª≠ l√Ω khu√¥n m·∫∑t trong ·∫£nh: {ve}")
    except Exception as e:
        logger.exception(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi tr√≠ch xu·∫•t embedding: {e}")
        raise RuntimeError(f"L·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t embedding: {e}")