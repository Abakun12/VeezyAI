import cv2
import numpy as np
from deepface import DeepFace
import logging
import time  # Để tính toán FPS (tùy chọn)

# Cấu hình logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Cấu hình các mô hình AI (phải giống với cách bạn tạo KNOWN_PERSON_EMBEDDING) ---
MODEL_NAME = "Facenet"
DETECTOR_BACKEND = "retinaface"
DISTANCE_METRIC = "cosine"  # Hoặc 'euclidean', 'euclidean_l2'

# ==============================================================================
# THAY THẾ VỚI "CƠ SỞ DỮ LIỆU" EMBEDDING THỰC TẾ CỦA BẠN!
# Đây là một danh sách các người đã biết. Mỗi người là một dictionary
# chứa "name" và "embedding" (là một list các số float).
# Bạn cần chạy script get_known_embedding.py cho mỗi người bạn muốn nhận dạng
# và thêm họ vào danh sách này.

KNOWN_PEOPLE_DB = [
    {
        "name": "Huy Thuan",
        "embedding": [0.888455152511597, -0.425651907920837, -1.8599761724472, -0.569734871387482, 0.470331072807312,
                      -1.10354375839233, -0.30873891711235, 0.650108754634857, 0.347141414880753, -0.525276720523834,
                      0.222110092639923, -0.967468976974487, -0.590272128582001, -1.89280116558075, 0.813664197921753,
                      0.320002019405365, 0.589952230453491, -0.377992928028107, 0.559006571769714, -0.562914907932282,
                      -1.57798206806183, 0.689863562583923, -1.40350615978241, 1.1351466178894, -0.744253575801849,
                      -0.36595144867897, 0.441689878702164, 0.473976910114288, -0.00160867720842361, 1.00187838077545,
                      0.438783228397369, -0.131056427955627, 0.354550868272781, -0.578484177589417, 0.451507717370987,
                      -0.0123574174940586, -0.378024697303772, -0.409914821386337, 1.06442713737488, 0.0662974119186401,
                      -0.48346483707428, 0.015192611142993, -0.531979441642761, -0.00805766135454178,
                      -0.574051916599274, -0.768898606300354, 0.269958913326263, -0.0990716218948364,
                      -0.226242661476135, 0.205576539039612, 0.616308629512787, -0.0975549221038818, 0.512913525104523,
                      0.309139877557755, 0.116630330681801, 0.244353860616684, -0.131043210625649, -0.140399590134621,
                      -1.27120506763458, -0.538052082061768, -0.90384978055954, -0.887688279151917, -0.0113572180271149,
                      1.0563770532608, 1.60990309715271, 1.30701756477356, 0.307987242937088, 0.149559572339058,
                      -0.195453733205795, -0.346619635820389, 0.752221882343292, -0.751433610916138, 0.38572758436203,
                      -1.05573976039886, -0.491364002227783, 0.735943078994751, -0.756477355957031, 1.02408397197723,
                      0.00519219040870667, -0.437104880809784, -0.907843172550201, 0.52183723449707, 0.474001497030258,
                      0.287231028079987, 0.859487116336823, -1.80241334438324, -0.371768951416016, -0.716162145137787,
                      -0.773717641830444, 0.465151846408844, 1.5677855014801, 0.159291923046112, -1.98788404464722,
                      0.411307781934738, -0.820034265518189, -0.458993017673492, -0.604386806488037, -0.43700298666954,
                      -1.33577060699463, -0.124939113855362, -0.229481369256973, 0.884367823600769, 1.03101027011871,
                      0.430736362934113, -0.211605876684189, 0.477212131023407, 0.0433698520064354, -0.115968927741051,
                      -0.470637798309326, -0.709501087665558, -0.0195298958569765, 0.219791397452354, 0.309806436300278,
                      -0.00101237744092941, 0.141684457659721, -0.339053303003311, 0.238436251878738, 0.289559245109558,
                      0.957050383090973, 0.304721832275391, 0.346119403839111, 0.240024954080582, 0.463468372821808,
                      -0.00688309036195278, 0.269730269908905, -1.54465687274933, -0.936563670635223, -1.12868750095367]
    },
    {
        "name": "Nguoi Mau A",  # Tên người mẫu A
        "embedding": [-0.7189861536026, -0.383380770683289, 0.478005886077881, 0.201632499694824, -0.642830431461334,
                      0.0794752091169357, -0.306310445070267, 0.790893316268921, -0.136870741844177, -0.431503176689148,
                      0.713620901107788, -0.407180070877075, 0.163492023944855, -0.889310479164124, 0.517906606197357,
                      0.228909492492676, -0.701509475708008, -0.106686472892761, -0.154970526695251,
                      -0.0103812217712402, -0.818971931934357, 0.151378750801086, -0.0142398476600647,
                      0.100736975669861, -0.0995287895202637, -0.808686017990112, 0.25753378868103, -0.184438228607178,
                      -0.299335956573486, 0.618023633956909, 0.107200860977173, -0.051028847694397, -0.138984203338623,
                      -0.405080199241638, 0.690257787704468, -0.231483221054077, -0.275390625, -0.181191921234131,
                      0.188618898391724, 0.100616216659546, -0.0173948999727145, -0.100778222084045,
                      -0.0588382482528687, 0.0760188102722168, -0.302502632141113, -0.100520014762878,
                      0.0107100009918213, -0.205198287963867, -0.0418040752410889, 0.00973987579345703,
                      -0.01898193359375, -0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664]
        # Giả lập 128 chiều
    },
    {
        "name": "Nguoi Mau B",  # Tên người mẫu B
        "embedding": [0.051028847694397, -0.138984203338623, -0.405080199241638, 0.690257787704468, -0.231483221054077,
                      -0.275390625, -0.181191921234131, 0.188618898391724, 0.100616216659546, -0.0173948999727145,
                      -0.100778222084045, -0.0588382482528687, 0.0760188102722168, -0.302502632141113,
                      -0.100520014762878, 0.0107100009918213, -0.205198287963867, -0.0418040752410889,
                      0.00973987579345703, -0.01898193359375, 0.7189861536026, 0.383380770683289, -0.478005886077881,
                      -0.201632499694824, 0.642830431461334, -0.0794752091169357, 0.306310445070267, -0.790893316268921,
                      0.136870741844177, 0.431503176689148, -0.713620901107788, 0.407180070877075, -0.163492023944855,
                      0.889310479164124, -0.517906606197357, -0.228909492492676, 0.701509475708008, 0.106686472892761,
                      0.154970526695251, 0.0103812217712402, 0.818971931934357, -0.151378750801086, 0.0142398476600647,
                      -0.100736975669861, 0.0995287895202637, 0.808686017990112, -0.25753378868103, 0.184438228607178,
                      0.299335956573486, -0.618023633956909, -0.107200860977173, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664, 0.0108041763305664, 0.0108041763305664,
                      0.0108041763305664, 0.0108041763305664]  # Giả lập 128 chiều
    }
]

if not KNOWN_PEOPLE_DB or KNOWN_PEOPLE_DB[0].get(
        "embedding") is None:  # Kiểm tra xem DB có rỗng hoặc embedding đầu tiên là None không
    logger.warning("KNOWN_PEOPLE_DB chưa được thiết lập đúng cách với ít nhất một embedding.")
    logger.warning(
        "Vui lòng chạy script get_known_embedding.py cho mỗi người, lấy embedding và cập nhật vào danh sách KNOWN_PEOPLE_DB.")


def preload_models():
    """Hàm để tải trước các mô hình AI."""
    try:
        logger.info(f"Đang tải mô hình AI ({MODEL_NAME}) và detector ({DETECTOR_BACKEND})...")
        DeepFace.build_model(MODEL_NAME)
        dummy_img = np.zeros((100, 100, 3), dtype=np.uint8)
        DeepFace.extract_faces(
            img_path=dummy_img,
            detector_backend=DETECTOR_BACKEND,
            enforce_detection=False
        )
        logger.info(f"Các mô hình AI ({MODEL_NAME}, {DETECTOR_BACKEND}) đã sẵn sàng.")
    except Exception as e:
        logger.exception(f"Lỗi khi tải trước mô hình: {e}")


def main():
    preload_models()

    cap = cv2.VideoCapture(0)

    if not cap.isOpened():
        logger.error("Không thể mở webcam.")
        return

    cv2.namedWindow("Live Face Recognition (One-to-Many)", cv2.WINDOW_NORMAL)

    prev_frame_time = 0

    # frame_count = 0 # Bỏ biến đếm frame
    # PROCESS_EVERY_N_FRAMES = 3 # Bỏ xử lý cách quãng
    # RESIZE_WIDTH = 320 # Bỏ resize

    while True:
        ret, frame = cap.read()
        if not ret:
            logger.error("Không thể nhận frame từ webcam. Đang thoát...")
            break

        frame = cv2.flip(frame, 1)
        display_frame = frame.copy()  # Sử dụng display_frame để vẽ, frame để xử lý AI
        # frame_count += 1 # Bỏ biến đếm frame

        # if frame_count % PROCESS_EVERY_N_FRAMES == 0: # Bỏ điều kiện xử lý cách quãng
        try:
            # processing_frame = frame.copy() # Không cần bản sao này nữa nếu không resize
            # if RESIZE_WIDTH is not None: # Bỏ logic resize
            # ... (code resize đã bị bỏ) ...

            detected_faces = DeepFace.extract_faces(
                img_path=frame,  # Xử lý trên frame gốc
                detector_backend=DETECTOR_BACKEND,
                enforce_detection=False,
                align=True
            )

            for face_data in detected_faces:
                if face_data['confidence'] > 0.5:
                    facial_area_dict = face_data['facial_area']

                    # Tọa độ dùng trực tiếp từ frame gốc vì không resize
                    x_orig = facial_area_dict['x']
                    y_orig = facial_area_dict['y']
                    w_orig = facial_area_dict['w']
                    h_orig = facial_area_dict['h']

                    padding = 10
                    face_img_cropped_for_verify = frame[max(0, y_orig - padding):min(frame.shape[0],
                                                                                     y_orig + h_orig + padding),
                                                  max(0, x_orig - padding):min(frame.shape[1],
                                                                               x_orig + w_orig + padding)]

                    if face_img_cropped_for_verify.size == 0:
                        continue

                    best_match_name = "Nguoi La"
                    box_color = (0, 0, 255)  # Đỏ
                    min_distance_found = float('inf')

                    for person_data in KNOWN_PEOPLE_DB:
                        if person_data.get("embedding") is None:
                            continue
                        try:
                            result = DeepFace.verify(
                                img1_path=face_img_cropped_for_verify,
                                img2_path=person_data["embedding"],
                                model_name=MODEL_NAME,
                                distance_metric=DISTANCE_METRIC,
                                detector_backend=DETECTOR_BACKEND,
                                align=True,
                                enforce_detection=False
                            )

                            if result["verified"] and result["distance"] < min_distance_found:
                                min_distance_found = result["distance"]
                                best_match_name = person_data["name"]
                                box_color = (0, 255, 0)  # Xanh lá

                        except ValueError as ve:
                            logger.debug(f"Lỗi khi verify với {person_data['name']}: {ve}")
                        except Exception as e_verify:
                            logger.error(f"Lỗi không xác định khi verify với {person_data['name']}: {e_verify}")

                    cv2.rectangle(display_frame, (x_orig, y_orig), (x_orig + w_orig, y_orig + h_orig), box_color, 2)
                    cv2.putText(display_frame, best_match_name, (x_orig, y_orig - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.7,
                                box_color, 2)

        except Exception as e:
            logger.error(f"Lỗi khi xử lý frame: {e}")

        current_time = time.time()
        if prev_frame_time > 0:
            fps = 1 / (current_time - prev_frame_time)
            cv2.putText(display_frame, f"FPS: {int(fps)}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        prev_frame_time = current_time

        cv2.imshow("Live Face Recognition (One-to-Many)", display_frame)

        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cap.release()
    cv2.destroyAllWindows()
    logger.info("Chương trình nhận diện khuôn mặt đã kết thúc.")


if __name__ == "__main__":
    main()